#pragma once

// Auto-generated enum for operation names
enum M3OpNames {
    M3OP_NAME_UNREACHABLE = 0,
    M3OP_NAME_NOP = 1,
    M3OP_NAME_BLOCK = 2,
    M3OP_NAME_LOOP = 3,
    M3OP_NAME_IF = 4,
    M3OP_NAME_ELSE = 5,
    M3OP_NAME_END = 6,
    M3OP_NAME_BR = 7,
    M3OP_NAME_BR_IF = 8,
    M3OP_NAME_BR_TABLE = 9,
    M3OP_NAME_RETURN = 10,
    M3OP_NAME_CALL = 11,
    M3OP_NAME_CALL_INDIRECT = 12,
    M3OP_NAME_RETURN_CALL = 13,
    M3OP_NAME_RETURN_CALL_INDIRECT = 14,
    M3OP_NAME_DROP = 15,
    M3OP_NAME_SELECT = 16,
    M3OP_NAME_LOCAL_GET = 17,
    M3OP_NAME_LOCAL_SET = 18,
    M3OP_NAME_LOCAL_TEE = 19,
    M3OP_NAME_GLOBAL_GET = 20,
    M3OP_NAME_GLOBAL_SET = 21,
    M3OP_NAME_I32_LOAD = 22,
    M3OP_NAME_I64_LOAD = 23,
    M3OP_NAME_I32_LOAD8_S = 24,
    M3OP_NAME_I32_LOAD8_U = 25,
    M3OP_NAME_I32_LOAD16_S = 26,
    M3OP_NAME_I32_LOAD16_U = 27,
    M3OP_NAME_I64_LOAD8_S = 28,
    M3OP_NAME_I64_LOAD8_U = 29,
    M3OP_NAME_I64_LOAD16_S = 30,
    M3OP_NAME_I64_LOAD16_U = 31,
    M3OP_NAME_I64_LOAD32_S = 32,
    M3OP_NAME_I64_LOAD32_U = 33,
    M3OP_NAME_I32_STORE = 34,
    M3OP_NAME_I64_STORE = 35,
    M3OP_NAME_I32_STORE8 = 36,
    M3OP_NAME_I32_STORE16 = 37,
    M3OP_NAME_I64_STORE8 = 38,
    M3OP_NAME_I64_STORE16 = 39,
    M3OP_NAME_I64_STORE32 = 40,
    M3OP_NAME_MEMORY_SIZE = 41,
    M3OP_NAME_MEMORY_GROW = 42,
    M3OP_NAME_I32_CONST = 43,
    M3OP_NAME_I64_CONST = 44,
    M3OP_NAME_I32_EQZ = 45,
    M3OP_NAME_I32_EQ = 46,
    M3OP_NAME_I32_NE = 47,
    M3OP_NAME_I32_LT_S = 48,
    M3OP_NAME_I32_LT_U = 49,
    M3OP_NAME_I32_GT_S = 50,
    M3OP_NAME_I32_GT_U = 51,
    M3OP_NAME_I32_LE_S = 52,
    M3OP_NAME_I32_LE_U = 53,
    M3OP_NAME_I32_GE_S = 54,
    M3OP_NAME_I32_GE_U = 55,
    M3OP_NAME_I64_EQZ = 56,
    M3OP_NAME_I64_EQ = 57,
    M3OP_NAME_I64_NE = 58,
    M3OP_NAME_I64_LT_S = 59,
    M3OP_NAME_I64_LT_U = 60,
    M3OP_NAME_I64_GT_S = 61,
    M3OP_NAME_I64_GT_U = 62,
    M3OP_NAME_I64_LE_S = 63,
    M3OP_NAME_I64_LE_U = 64,
    M3OP_NAME_I64_GE_S = 65,
    M3OP_NAME_I64_GE_U = 66,
    M3OP_NAME_I32_CLZ = 67,
    M3OP_NAME_I32_CTZ = 68,
    M3OP_NAME_I32_POPCNT = 69,
    M3OP_NAME_I32_ADD = 70,
    M3OP_NAME_I32_SUB = 71,
    M3OP_NAME_I32_MUL = 72,
    M3OP_NAME_I32_DIV_S = 73,
    M3OP_NAME_I32_DIV_U = 74,
    M3OP_NAME_I32_REM_S = 75,
    M3OP_NAME_I32_REM_U = 76,
    M3OP_NAME_I32_AND = 77,
    M3OP_NAME_I32_OR = 78,
    M3OP_NAME_I32_XOR = 79,
    M3OP_NAME_I32_SHL = 80,
    M3OP_NAME_I32_SHR_S = 81,
    M3OP_NAME_I32_SHR_U = 82,
    M3OP_NAME_I32_ROTL = 83,
    M3OP_NAME_I32_ROTR = 84,
    M3OP_NAME_I64_CLZ = 85,
    M3OP_NAME_I64_CTZ = 86,
    M3OP_NAME_I64_POPCNT = 87,
    M3OP_NAME_I64_ADD = 88,
    M3OP_NAME_I64_SUB = 89,
    M3OP_NAME_I64_MUL = 90,
    M3OP_NAME_I64_DIV_S = 91,
    M3OP_NAME_I64_DIV_U = 92,
    M3OP_NAME_I64_REM_S = 93,
    M3OP_NAME_I64_REM_U = 94,
    M3OP_NAME_I64_AND = 95,
    M3OP_NAME_I64_OR = 96,
    M3OP_NAME_I64_XOR = 97,
    M3OP_NAME_I64_SHL = 98,
    M3OP_NAME_I64_SHR_S = 99,
    M3OP_NAME_I64_SHR_U = 100,
    M3OP_NAME_I64_ROTL = 101,
    M3OP_NAME_I64_ROTR = 102,
    M3OP_NAME_I32_WRAP_I64 = 103,
    M3OP_NAME_I64_EXTEND_S_I32 = 104,
    M3OP_NAME_I64_EXTEND_U_I32 = 105,
    M3OP_NAME_I32_EXTEND8_S = 106,
    M3OP_NAME_I32_EXTEND16_S = 107,
    M3OP_NAME_I64_EXTEND8_S = 108,
    M3OP_NAME_I64_EXTEND16_S = 109,
    M3OP_NAME_I64_EXTEND32_S = 110,
    M3OP_NAME_0XFC = 111,
    M3OP_NAME_TERMINATION = 115,
    M3OP_NAME_MEMORY_COPY = 113,
    M3OP_NAME_MEMORY_FILL = 114,
};

// Auto-generated array of operation names
static const char * const RODATA_ATTR opNames[] = {
    "unreachable",
    "nop",
    "block",
    "loop",
    "if",
    "else",
    "end",
    "br",
    "br_if",
    "br_table",
    "return",
    "call",
    "call_indirect",
    "return_call",
    "return_call_indirect",
    "drop",
    "select",
    "local.get",
    "local.set",
    "local.tee",
    "global.get",
    "global.set",
    "i32.load",
    "i64.load",
    "i32.load8_s",
    "i32.load8_u",
    "i32.load16_s",
    "i32.load16_u",
    "i64.load8_s",
    "i64.load8_u",
    "i64.load16_s",
    "i64.load16_u",
    "i64.load32_s",
    "i64.load32_u",
    "i32.store",
    "i64.store",
    "i32.store8",
    "i32.store16",
    "i64.store8",
    "i64.store16",
    "i64.store32",
    "memory.size",
    "memory.grow",
    "i32.const",
    "i64.const",
    "i32.eqz",
    "i32.eq",
    "i32.ne",
    "i32.lt_s",
    "i32.lt_u",
    "i32.gt_s",
    "i32.gt_u",
    "i32.le_s",
    "i32.le_u",
    "i32.ge_s",
    "i32.ge_u",
    "i64.eqz",
    "i64.eq",
    "i64.ne",
    "i64.lt_s",
    "i64.lt_u",
    "i64.gt_s",
    "i64.gt_u",
    "i64.le_s",
    "i64.le_u",
    "i64.ge_s",
    "i64.ge_u",
    "i32.clz",
    "i32.ctz",
    "i32.popcnt",
    "i32.add",
    "i32.sub",
    "i32.mul",
    "i32.div_s",
    "i32.div_u",
    "i32.rem_s",
    "i32.rem_u",
    "i32.and",
    "i32.or",
    "i32.xor",
    "i32.shl",
    "i32.shr_s",
    "i32.shr_u",
    "i32.rotl",
    "i32.rotr",
    "i64.clz",
    "i64.ctz",
    "i64.popcnt",
    "i64.add",
    "i64.sub",
    "i64.mul",
    "i64.div_s",
    "i64.div_u",
    "i64.rem_s",
    "i64.rem_u",
    "i64.and",
    "i64.or",
    "i64.xor",
    "i64.shl",
    "i64.shr_s",
    "i64.shr_u",
    "i64.rotl",
    "i64.rotr",
    "i32.wrap/i64",
    "i64.extend_s/i32",
    "i64.extend_u/i32",
    "i32.extend8_s",
    "i32.extend16_s",
    "i64.extend8_s",
    "i64.extend16_s",
    "i64.extend32_s",
    "0xFC",
    "termination",
    "memory.copy",
    "memory.fill",
};

// Auto-generated getter function
#if DEBUG
const char* getOpName(uint8_t id) {
    return opNames[id];
}
#endif
